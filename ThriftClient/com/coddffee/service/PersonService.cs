/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace com.coddffee.service
{
  public partial class PersonService
  {
    public interface IAsync
    {
      global::System.Threading.Tasks.Task<global::com.coddffee.entity.Person> newPerson(int id, string name, global::com.coddffee.enums.Gender gender, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<int> getId(CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<string> getName(CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::com.coddffee.enums.Gender> getGender(CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task printPerson(CancellationToken cancellationToken = default);

    }


    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<global::com.coddffee.entity.Person> newPerson(int id, string name, global::com.coddffee.enums.Gender gender, CancellationToken cancellationToken = default)
      {
        await send_newPerson(id, name, gender, cancellationToken);
        return await recv_newPerson(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_newPerson(int id, string name, global::com.coddffee.enums.Gender gender, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("newPerson", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp0 = new InternalStructs.newPerson_args() {
          Id = id,
          Name = name,
          Gender = gender,
        };
        
        await tmp0.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::com.coddffee.entity.Person> recv_newPerson(CancellationToken cancellationToken = default)
      {
        
        var tmp1 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1.Type == TMessageType.Exception)
        {
          var tmp2 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2;
        }

        var tmp3 = new InternalStructs.newPerson_result();
        await tmp3.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3.__isset.success)
        {
          return tmp3.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "newPerson failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> getId(CancellationToken cancellationToken = default)
      {
        await send_getId(cancellationToken);
        return await recv_getId(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getId(CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getId", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp4 = new InternalStructs.getId_args() {
        };
        
        await tmp4.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_getId(CancellationToken cancellationToken = default)
      {
        
        var tmp5 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp5.Type == TMessageType.Exception)
        {
          var tmp6 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp6;
        }

        var tmp7 = new InternalStructs.getId_result();
        await tmp7.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp7.__isset.success)
        {
          return tmp7.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getId failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> getName(CancellationToken cancellationToken = default)
      {
        await send_getName(cancellationToken);
        return await recv_getName(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getName(CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getName", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp8 = new InternalStructs.getName_args() {
        };
        
        await tmp8.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_getName(CancellationToken cancellationToken = default)
      {
        
        var tmp9 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp9.Type == TMessageType.Exception)
        {
          var tmp10 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp10;
        }

        var tmp11 = new InternalStructs.getName_result();
        await tmp11.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp11.__isset.success)
        {
          return tmp11.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getName failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::com.coddffee.enums.Gender> getGender(CancellationToken cancellationToken = default)
      {
        await send_getGender(cancellationToken);
        return await recv_getGender(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getGender(CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getGender", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp12 = new InternalStructs.getGender_args() {
        };
        
        await tmp12.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::com.coddffee.enums.Gender> recv_getGender(CancellationToken cancellationToken = default)
      {
        
        var tmp13 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp13.Type == TMessageType.Exception)
        {
          var tmp14 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp14;
        }

        var tmp15 = new InternalStructs.getGender_result();
        await tmp15.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp15.__isset.success)
        {
          return tmp15.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getGender failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task printPerson(CancellationToken cancellationToken = default)
      {
        await send_printPerson(cancellationToken);
        await recv_printPerson(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_printPerson(CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("printPerson", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp16 = new InternalStructs.printPerson_args() {
        };
        
        await tmp16.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_printPerson(CancellationToken cancellationToken = default)
      {
        
        var tmp17 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp17.Type == TMessageType.Exception)
        {
          var tmp18 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp18;
        }

        var tmp19 = new InternalStructs.printPerson_result();
        await tmp19.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp19.__isset.e)
        {
          throw tmp19.E;
        }
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["newPerson"] = newPerson_ProcessAsync;
        processMap_["getId"] = getId_ProcessAsync;
        processMap_["getName"] = getName_ProcessAsync;
        processMap_["getGender"] = getGender_ProcessAsync;
        processMap_["printPerson"] = printPerson_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out ProcessFunction fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task newPerson_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp20 = new InternalStructs.newPerson_args();
        await tmp20.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp21 = new InternalStructs.newPerson_result();
        try
        {
          tmp21.Success = await _iAsync.newPerson(tmp20.Id, tmp20.Name, tmp20.Gender, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("newPerson", TMessageType.Reply, seqid), cancellationToken); 
          await tmp21.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp22)
        {
          var tmp23 = $"Error occurred in {GetType().FullName}: {tmp22.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp22, tmp23);
          else
            Console.Error.WriteLine(tmp23);
          var tmp24 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("newPerson", TMessageType.Exception, seqid), cancellationToken);
          await tmp24.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getId_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp25 = new InternalStructs.getId_args();
        await tmp25.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp26 = new InternalStructs.getId_result();
        try
        {
          tmp26.Success = await _iAsync.getId(cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("getId", TMessageType.Reply, seqid), cancellationToken); 
          await tmp26.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp27)
        {
          var tmp28 = $"Error occurred in {GetType().FullName}: {tmp27.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp27, tmp28);
          else
            Console.Error.WriteLine(tmp28);
          var tmp29 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getId", TMessageType.Exception, seqid), cancellationToken);
          await tmp29.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp30 = new InternalStructs.getName_args();
        await tmp30.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp31 = new InternalStructs.getName_result();
        try
        {
          tmp31.Success = await _iAsync.getName(cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("getName", TMessageType.Reply, seqid), cancellationToken); 
          await tmp31.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp32)
        {
          var tmp33 = $"Error occurred in {GetType().FullName}: {tmp32.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp32, tmp33);
          else
            Console.Error.WriteLine(tmp33);
          var tmp34 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getName", TMessageType.Exception, seqid), cancellationToken);
          await tmp34.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getGender_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp35 = new InternalStructs.getGender_args();
        await tmp35.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp36 = new InternalStructs.getGender_result();
        try
        {
          tmp36.Success = await _iAsync.getGender(cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("getGender", TMessageType.Reply, seqid), cancellationToken); 
          await tmp36.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp37)
        {
          var tmp38 = $"Error occurred in {GetType().FullName}: {tmp37.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp37, tmp38);
          else
            Console.Error.WriteLine(tmp38);
          var tmp39 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getGender", TMessageType.Exception, seqid), cancellationToken);
          await tmp39.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task printPerson_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp40 = new InternalStructs.printPerson_args();
        await tmp40.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp41 = new InternalStructs.printPerson_result();
        try
        {
          try
          {
            await _iAsync.printPerson(cancellationToken);
          }
          catch (global::com.coddffee.exception.PersonException tmp42)
          {
            tmp41.E = tmp42;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("printPerson", TMessageType.Reply, seqid), cancellationToken); 
          await tmp41.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp43)
        {
          var tmp44 = $"Error occurred in {GetType().FullName}: {tmp43.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp43, tmp44);
          else
            Console.Error.WriteLine(tmp44);
          var tmp45 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("printPerson", TMessageType.Exception, seqid), cancellationToken);
          await tmp45.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class newPerson_args : TBase
      {
        private int _id;
        private string _name;
        private global::com.coddffee.enums.Gender _gender;

        public int Id
        {
          get
          {
            return _id;
          }
          set
          {
            __isset.id = true;
            this._id = value;
          }
        }

        public string Name
        {
          get
          {
            return _name;
          }
          set
          {
            __isset.name = true;
            this._name = value;
          }
        }

        /// <summary>
        /// 
        /// <seealso cref="global::com.coddffee.enums.Gender"/>
        /// </summary>
        public global::com.coddffee.enums.Gender Gender
        {
          get
          {
            return _gender;
          }
          set
          {
            __isset.gender = true;
            this._gender = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool id;
          public bool name;
          public bool gender;
        }

        public newPerson_args()
        {
        }

        public newPerson_args DeepCopy()
        {
          var tmp46 = new newPerson_args();
          if(__isset.id)
          {
            tmp46.Id = this.Id;
          }
          tmp46.__isset.id = this.__isset.id;
          if((Name != null) && __isset.name)
          {
            tmp46.Name = this.Name;
          }
          tmp46.__isset.name = this.__isset.name;
          if(__isset.gender)
          {
            tmp46.Gender = this.Gender;
          }
          tmp46.__isset.gender = this.__isset.gender;
          return tmp46;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    Id = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Gender = (global::com.coddffee.enums.Gender)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp47 = new TStruct("newPerson_args");
            await oprot.WriteStructBeginAsync(tmp47, cancellationToken);
            var tmp48 = new TField();
            if(__isset.id)
            {
              tmp48.Name = "id";
              tmp48.Type = TType.I32;
              tmp48.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp48, cancellationToken);
              await oprot.WriteI32Async(Id, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Name != null) && __isset.name)
            {
              tmp48.Name = "name";
              tmp48.Type = TType.String;
              tmp48.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp48, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.gender)
            {
              tmp48.Name = "gender";
              tmp48.Type = TType.I32;
              tmp48.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp48, cancellationToken);
              await oprot.WriteI32Async((int)Gender, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is newPerson_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))))
            && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))))
            && ((__isset.gender == other.__isset.gender) && ((!__isset.gender) || (global::System.Object.Equals(Gender, other.Gender))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.id)
            {
              hashcode = (hashcode * 397) + Id.GetHashCode();
            }
            if((Name != null) && __isset.name)
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
            if(__isset.gender)
            {
              hashcode = (hashcode * 397) + Gender.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp49 = new StringBuilder("newPerson_args(");
          int tmp50 = 0;
          if(__isset.id)
          {
            if(0 < tmp50++) { tmp49.Append(", "); }
            tmp49.Append("Id: ");
            Id.ToString(tmp49);
          }
          if((Name != null) && __isset.name)
          {
            if(0 < tmp50++) { tmp49.Append(", "); }
            tmp49.Append("Name: ");
            Name.ToString(tmp49);
          }
          if(__isset.gender)
          {
            if(0 < tmp50++) { tmp49.Append(", "); }
            tmp49.Append("Gender: ");
            Gender.ToString(tmp49);
          }
          tmp49.Append(')');
          return tmp49.ToString();
        }
      }


      public partial class newPerson_result : TBase
      {
        private global::com.coddffee.entity.Person _success;

        public global::com.coddffee.entity.Person Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public newPerson_result()
        {
        }

        public newPerson_result DeepCopy()
        {
          var tmp51 = new newPerson_result();
          if((Success != null) && __isset.success)
          {
            tmp51.Success = (global::com.coddffee.entity.Person)this.Success.DeepCopy();
          }
          tmp51.__isset.success = this.__isset.success;
          return tmp51;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::com.coddffee.entity.Person();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp52 = new TStruct("newPerson_result");
            await oprot.WriteStructBeginAsync(tmp52, cancellationToken);
            var tmp53 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp53.Name = "Success";
                tmp53.Type = TType.Struct;
                tmp53.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp53, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is newPerson_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp54 = new StringBuilder("newPerson_result(");
          int tmp55 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp55++) { tmp54.Append(", "); }
            tmp54.Append("Success: ");
            Success.ToString(tmp54);
          }
          tmp54.Append(')');
          return tmp54.ToString();
        }
      }


      public partial class getId_args : TBase
      {

        public getId_args()
        {
        }

        public getId_args DeepCopy()
        {
          var tmp56 = new getId_args();
          return tmp56;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp57 = new TStruct("getId_args");
            await oprot.WriteStructBeginAsync(tmp57, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getId_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp58 = new StringBuilder("getId_args(");
          tmp58.Append(')');
          return tmp58.ToString();
        }
      }


      public partial class getId_result : TBase
      {
        private int _success;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public getId_result()
        {
        }

        public getId_result DeepCopy()
        {
          var tmp60 = new getId_result();
          if(__isset.success)
          {
            tmp60.Success = this.Success;
          }
          tmp60.__isset.success = this.__isset.success;
          return tmp60;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp61 = new TStruct("getId_result");
            await oprot.WriteStructBeginAsync(tmp61, cancellationToken);
            var tmp62 = new TField();

            if(this.__isset.success)
            {
              tmp62.Name = "Success";
              tmp62.Type = TType.I32;
              tmp62.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp62, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getId_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp63 = new StringBuilder("getId_result(");
          int tmp64 = 0;
          if(__isset.success)
          {
            if(0 < tmp64++) { tmp63.Append(", "); }
            tmp63.Append("Success: ");
            Success.ToString(tmp63);
          }
          tmp63.Append(')');
          return tmp63.ToString();
        }
      }


      public partial class getName_args : TBase
      {

        public getName_args()
        {
        }

        public getName_args DeepCopy()
        {
          var tmp65 = new getName_args();
          return tmp65;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp66 = new TStruct("getName_args");
            await oprot.WriteStructBeginAsync(tmp66, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getName_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp67 = new StringBuilder("getName_args(");
          tmp67.Append(')');
          return tmp67.ToString();
        }
      }


      public partial class getName_result : TBase
      {
        private string _success;

        public string Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public getName_result()
        {
        }

        public getName_result DeepCopy()
        {
          var tmp69 = new getName_result();
          if((Success != null) && __isset.success)
          {
            tmp69.Success = this.Success;
          }
          tmp69.__isset.success = this.__isset.success;
          return tmp69;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp70 = new TStruct("getName_result");
            await oprot.WriteStructBeginAsync(tmp70, cancellationToken);
            var tmp71 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp71.Name = "Success";
                tmp71.Type = TType.String;
                tmp71.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp71, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getName_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp72 = new StringBuilder("getName_result(");
          int tmp73 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp73++) { tmp72.Append(", "); }
            tmp72.Append("Success: ");
            Success.ToString(tmp72);
          }
          tmp72.Append(')');
          return tmp72.ToString();
        }
      }


      public partial class getGender_args : TBase
      {

        public getGender_args()
        {
        }

        public getGender_args DeepCopy()
        {
          var tmp74 = new getGender_args();
          return tmp74;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp75 = new TStruct("getGender_args");
            await oprot.WriteStructBeginAsync(tmp75, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getGender_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp76 = new StringBuilder("getGender_args(");
          tmp76.Append(')');
          return tmp76.ToString();
        }
      }


      public partial class getGender_result : TBase
      {
        private global::com.coddffee.enums.Gender _success;

        /// <summary>
        /// 
        /// <seealso cref="global::com.coddffee.enums.Gender"/>
        /// </summary>
        public global::com.coddffee.enums.Gender Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public getGender_result()
        {
        }

        public getGender_result DeepCopy()
        {
          var tmp78 = new getGender_result();
          if(__isset.success)
          {
            tmp78.Success = this.Success;
          }
          tmp78.__isset.success = this.__isset.success;
          return tmp78;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = (global::com.coddffee.enums.Gender)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp79 = new TStruct("getGender_result");
            await oprot.WriteStructBeginAsync(tmp79, cancellationToken);
            var tmp80 = new TField();

            if(this.__isset.success)
            {
              tmp80.Name = "Success";
              tmp80.Type = TType.I32;
              tmp80.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp80, cancellationToken);
              await oprot.WriteI32Async((int)Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getGender_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp81 = new StringBuilder("getGender_result(");
          int tmp82 = 0;
          if(__isset.success)
          {
            if(0 < tmp82++) { tmp81.Append(", "); }
            tmp81.Append("Success: ");
            Success.ToString(tmp81);
          }
          tmp81.Append(')');
          return tmp81.ToString();
        }
      }


      public partial class printPerson_args : TBase
      {

        public printPerson_args()
        {
        }

        public printPerson_args DeepCopy()
        {
          var tmp83 = new printPerson_args();
          return tmp83;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp84 = new TStruct("printPerson_args");
            await oprot.WriteStructBeginAsync(tmp84, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is printPerson_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp85 = new StringBuilder("printPerson_args(");
          tmp85.Append(')');
          return tmp85.ToString();
        }
      }


      public partial class printPerson_result : TBase
      {
        private global::com.coddffee.exception.PersonException _e;

        public global::com.coddffee.exception.PersonException E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool e;
        }

        public printPerson_result()
        {
        }

        public printPerson_result DeepCopy()
        {
          var tmp87 = new printPerson_result();
          if((E != null) && __isset.e)
          {
            tmp87.E = (global::com.coddffee.exception.PersonException)this.E.DeepCopy();
          }
          tmp87.__isset.e = this.__isset.e;
          return tmp87;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::com.coddffee.exception.PersonException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp88 = new TStruct("printPerson_result");
            await oprot.WriteStructBeginAsync(tmp88, cancellationToken);
            var tmp89 = new TField();

            if(this.__isset.e)
            {
              if (E != null)
              {
                tmp89.Name = "E";
                tmp89.Type = TType.Struct;
                tmp89.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp89, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is printPerson_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp90 = new StringBuilder("printPerson_result(");
          int tmp91 = 0;
          if((E != null) && __isset.e)
          {
            if(0 < tmp91++) { tmp90.Append(", "); }
            tmp90.Append("E: ");
            E.ToString(tmp90);
          }
          tmp90.Append(')');
          return tmp90.ToString();
        }
      }

    }

  }
}
